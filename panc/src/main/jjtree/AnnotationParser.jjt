/*
 Copyright (c) 2008 Charles A. Loomis, Jr, Cedric Duprilot, and
 Centre National de la Recherche Scientifique (CNRS).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.

 $HeadURL: https://svn.lal.in2p3.fr/LCG/QWG/panc/trunk/grammar/PanParser.jjt $
 $Id: PanParser.jjt 3914 2008-11-19 11:21:13Z loomis $
 */

options {
  LOOKAHEAD = 1;
  FORCE_LA_CHECK = false;
  STATIC = false;
  MULTI = true;
  UNICODE_INPUT = true;
  JDK_VERSION = "1.8";
}

PARSER_BEGIN(AnnotationParser)

package org.quattor.pan.parser.annotation;

import org.quattor.pan.annotation.Annotation;

import static org.quattor.pan.annotation.Annotation.Entry;

import java.util.List;
import java.util.LinkedList;

@SuppressWarnings("unchecked")
public class AnnotationParser {

  private static final java.util.regex.Pattern replaceDoubleQuotes 
    = java.util.regex.Pattern.compile("\"\"", java.util.regex.Pattern.MULTILINE);

  private static final java.util.regex.Pattern replaceSingleQuotes
    = java.util.regex.Pattern.compile("''", java.util.regex.Pattern.MULTILINE);

  private static final java.util.regex.Pattern replaceContinuation
    = java.util.regex.Pattern.compile("\\\\(\\n|\\r|\\r\\n)", 
                                      java.util.regex.Pattern.MULTILINE);

}

PARSER_END(AnnotationParser)


/* Skip white space. */
<DEFAULT, VSEARCH> SKIP : /* Whitespace. */
{
  < (" " | "\t" | "\f" | "\n" | "\r" | "\r\n") > 
}

TOKEN : /* The equals sign.  Absorb leading and trailing whitespace here. */
{
  <EQUALS: (" " | "\t")* "=" (" " | "\t")* > : VSEARCH
}

TOKEN : /* Keys for annotations. */
{
  <KEY: ( [ "a"-"z", "A"-"Z", "_", "0"-"9", "-", "." ] )+ >
}

<VSEARCH> TOKEN : /* Strings and values. */
{
  < SINGLE_QUOTED_STRING: "'" ( (~["'"]) | ("''") )* "'" > : DEFAULT
  |
  < DOUBLE_QUOTED_STRING: "\"" ( (~["\""]) | ("\"\"") )* "\""  > : DEFAULT
  |
  < VALUE: (
             ("\\" ("\n" | "\r" | "\r\n"))*
             (~["\n", "\r", "'", "\"", "\\"])
             ( (~["\n", "\r"])* | ("\\" ("\n" | "\r" | "\r\n")) )*
           ) > : DEFAULT
}

/* End-of-file processing. */
<*> TOKEN : 
{
  <EOF>
}

/* If nothing else matches in the lexer, then there is an error.
   Match the character where a standard token cannot be found. */
<*> TOKEN:
{
  <ERROR: ~[] >
}


/*************************************************************************
An annotation is just a sequence of key/value pairs.
*************************************************************************/
List<Entry> annotation() #Annotation :
{ Token n; List<Entry> entries = new LinkedList<Entry>(); }
{
  (pair(entries))* <EOF>
  {
    return entries;
  }
}

/*************************************************************************
Definition of a single key/value pair.
*************************************************************************/
void pair(List<Entry> entries) #Pair :
{ Token t; String v; }
{
  t=<KEY> <EQUALS> v=value()
  {
    entries.add(new Entry(t.image, v));
  }
}

/*************************************************************************
Values are either quoted strings or characters terminated by a newline.
*************************************************************************/
String value() #void : 
{ Token t; String s; }
{
  t=<SINGLE_QUOTED_STRING>
  {
    s = t.image;
    s = s.substring(1, s.length() - 1);
    return replaceSingleQuotes.matcher(s).replaceAll("'");
  }
  |
  t=<DOUBLE_QUOTED_STRING>
  {
    s = t.image;
    s = s.substring(1, s.length() - 1);
    return replaceDoubleQuotes.matcher(s).replaceAll("\"");
  }
  |
  t=<VALUE>
  {
    s = t.image;
    return replaceContinuation.matcher(s).replaceAll("").trim();
  }
}
